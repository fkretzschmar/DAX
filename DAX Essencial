Qtd Média Itens = AVERAGE(fVendas[QtdItens])


Notas Emitidas = DISTINCTCOUNT(fVendas[NFe])


Faturamento = SUMX(fVendas,fVendas[QtdItens] * fVendas[ValorUnitario])


Qtd Linhas Vendas = COUNTROWS(fVendas)


Ticket Médio = [Faturamento] / [Notas Emitidas]


Faturamento 2018 = CALCULATE([Faturamento], dCalendario[Ano] = 2018)


Fat Alimentos 2018 = 
CALCULATE(
    [Faturamento],
    dCalendario[Ano] = 2018,
    fVendas[Linha Produto] = "Alimentos"
)


% Fat 2018 = DIVIDE([Faturamento 2018] , [Faturamento])


- - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - -
*% do total por cada vendedor(Pode ser feito para faturamento e Qtd Itens também)                     %

Qtd Itens Vendidos = SUM(fVendas[QtdItens])
Faturamento = SUMX(fVendas,fVendas[QtdItens] * fVendas[ValorUnitario])
Notas Emitidas = DISTINCTCOUNT(fVendas[NFe])

ALL Notas Emitidas =                 //Para porcentagem total
CALCULATE(
    [Notas Emitidas],
    ALL(fVendas)
)

% Notas = DIVIDE([Qtd Notas Emitidas],[ALL Notas Emitidas])

OU

ALL Notas Emitidas Subcategoria =     //Para porcentagem entre subcategorias
CALCULATE(
    [Notas Emitidas],
    ALL(fVendas),
    VALUES(fVendas[Subcategoria])
)

OU

ALL Notas Emitidas =              //Esse é bom para brincar com filtros de fora
CALCULATE(
    [Notas Emitidas],
    ALLSELECTED(fVendas)
)

DEPOIS

% Notas = DIVIDE([Qtd Notas Emitidas],[ALL Notas Emitidas])

- - - - - - -- - - - -- - - - - - - - - - - - - - - - - - - - - - - -
                                                                     FILTER
Faturamento Vendedores > 1M = 
CALCULATE(
    [Faturamento],
    FILTER(
        dVendedor,
        [Faturamento] > 1000000
    )
)

*Filtrar e extrair de uma matriz apenas valores que desejo

Fat France =
CALCULATE)
    [Faturamento],
    KEEPFILTERS(dCliente[Pais] = "France")
)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*Calculando valores, com OU entre COLUNAS DE DUAS TABELAS DIFERENTES

Fat OU = 
CALCULATE(
    [Faturamento],
    FILTER(
        SUMMARIZE(
            fVendas,
            dCalendario[Ano],
            dVendedor[Vendedor]
        ),
        dCalendario[Ano] = 2018 || dVendedor[Vendedor] = "Carla Ferreira"
))

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                                                 BATIMENTO COM MÊS ANTERIOR

Faturamento Mês Anterior = 
CALCULATE(
    [Faturamento],
    DATEADD(dCalendario[Data], -1, MONTH)
)


% Faturamento MoM = DIVIDE([Faturamento] - [Faturamento Mês Anterior], [Faturamento Mês Anterior])

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                       FATURAMENTO ANO ANTERIOR 2 MANEIRAS

Faturamento PY = 
CALCULATE(
    [Faturamento],
    //DATEADD(dCalendario[Data], -1, YEAR)
    SAMEPERIODLASTYEAR(dCalendario[Data])
)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -      
                                                                                 SEMANA ANTERIOR

Faturamento Semana Ant = 
CALCULATE(
    [Faturamento],
    FILTER(
        ALL(dCalendario),
        dCalendario[Semana] = SELECTEDVALUE(dCalendario[Semana]) -1
        ),
        VALUES(dCalendario[Ano]
        )
)


- - - - - - - - - - - - - - - - - - - - --- -- - - - - - - - - - - - - - - - - -
                                                                        FATURAMENTO ACUMULANDO MÊS A MÊS E ZERANDO AO FIM DO ANO

Faturamento YTD = 
CALCULATE(
    [Faturamento],
    DATESYTD(dCalendario[Data])
)


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                                                            FATURAMENTO ACUMULADO MÊS A MÊS SEGUINDO OUTROS ANOS
Total Vendas Acumulado =
VAR vUltimoDiaContexto = MAX (dCalendario[Data])
VAR vAcumulado =
CALCULATE(
    [Faturamento],
    FILTER(
        ALL(dCalendario),
        dCalendario[Data] <= vUltimoDiaContexto
    )
)
RETURN
vAcumulado

OU

Fat Acc Mes Passado v2 = 
VAR vDataContexto = MIN(Data[DataID])
RETURN
CALCULATE(
    [Faturamento],
    FILTER(
            ALL(Data),                         //Data = nome tabela
            Data[DataId] < vDataContexto       //DataId = Nome da coluna data
)

OU

*Vá até a tabela Calendario e crie uma coluna
Contador Mes = (Data[Ano] - 2017)*12 + Data[MesNum]


Fat Acc Mes Passado v3 = 
VAR vMesAtual = MAX(Data[Contador Mes])
RETURN
CALCULATE(
    [Faturamento],
    ALL(Data),
    Data[Contador Mes] <= vMesAtual - 1
)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                        ANÁLISE DE VARIEDADE DE PRODUTOS VENDIDOS

Positivação = DISTINCTCOUNT(fVendas[cdProduto])


Positivação PM = 
CALCULATE(
    [Positivação],
    DATEADD(dCalendario[Data], -1, MONTH)
)


% Positivação MoM = DIVIDE([Positivação] - [Positivação PM], [Positivação PM])

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                                                                PERDA ACUMULADA DE CONTRATO MÊS ATÉ FIM DO ANO
[Churn] = coluna com os valores dos contratos que foi perdido
PERDA ACUMULADA DE CONTRATO MÊS, LEVANDO EM CONTA SE PERDER O CONTRATO EM 
perdeu um contrato de R$50 em JAN
perdeu um contrato de R$70 em FEV
ESSE VALOR DEVE SER DESCONTADO MÊS A MÊS ATÉ O FIM DO ANO

Churn MRR YTD v2 = 
VAR MesContexto = MAX(dCalendario[Mês])
VAR ProjecaoAno =
SUMX(
    DATESYTD(dCalendario[data]),
    VAR MesIteracao = CALCULATE(MAX(dCalendario[Mês]))
    RETURN
    [Churn] * (MesContexto - MesIteracao + 1)
)
RETURN
ProjecaoAno

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                      MATRIZ ou TABELA                   COMPARAÇÃO DE PERIODOS INCOMPLETOS ANO ATUAL X ANTERIOR

*Em (Modelo de Exibição de Tabela) na tabela dCalendario crie uma nova coluna:

Possui Vendas? = dCalendario[Data] <= MAX(fVendas[Data Venda])

*vai retornar TRUE ou FALSE

*Retorne para (Exibição de Relatório) selecione a Matriz ou Tabela,
vá em FILTROS>Filtros neste visual jogue a coluna (Possui Vendas?) e selecione True

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                    RANK

Rank Categoria = 
RANKX(
    ALL(Cliente[Categoria]),
    [Faturamento]
)



Rank entre duas colunas da mesma tabela = 
RANKX(
    ALL(Cliente[Categoria], Cliente[Rede]),
    [Faturamento]
)


Rank entre duas colunas de tabelas diferentes = 
RANKX(
    CROSSJOIN(
        ALL(Cliente[Categoria]),
        ALL(Produto[Grupo])
    ),
    [Faturamento]
)


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                                                                    DOLAR DIA ANTERIOR
Dolar Dia Anterior Correto = 
VAR vDataAtual = SELECTEDVALUE(dCalendario[ID Data])
VAR vDiaAnterior = 
CALCULATE(
    MAX('Cotação'[Data Cotação]),
    FILTER(
        ALLSELECTED(dCalendario),
        dCalendario[ID Data] < vDataAtual
    )
)
VAR vDolarAnt = 
CALCULATE(
    [Dolar],
    dCalendario[ID Data] = vDiaAnterior
)
RETURN
vDolarAnt

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                                                                    VALOR DO ULTIMO PEDIDO
//Dados= nome da tabela

Ultimo Valor = 
VAR vDataAtual = SELECTEDVALUE(Dados[Data])
VAR vProdutoAtual = SELECTEDVALUE(Dados[produto])
VAR vUltimaData =
    CALCULATE(
        MAX(Dados[Data]),
        FILTER(
            ALL(Dados),
            Dados[Data] < vDataAtual &&
            Dados[produto] = vProdutoAtual
        )
    )
VAR UltimoCusto =
    CALCULATE(
        SUM(Dados[custo total]),
        FILTER(
            ALL(Dados),
            Dados[Data] = vUltimaData &&
            Dados[produto] = vProdutoAtual
        )
    )
RETURN 
    UltimoCusto


Media Ultimas Compras =
VAR vDataAtual = SELECTEDVALUE(Dados[Data])
VAR vProdutoAtual = SELECTEDVALUE(Dados[produto])
VAR vMedia =
CALCULATE(
    AVARAGE(Dados[Custo Total]),
    ALL(Dados),
    Dados[data] < vDataAtual,
    Dados[produto] = vProdutoAtual
)
RETURN
vMedia



total = SUM(Dados[custo total])
% mudança = DIVIDE([Ultimo Valor] - [total], [total])

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                                                   PRODUTO MAIS VENDIDO
TOPN(
    1, VALUES(Vendas[Produto]), 
CALCULATE(
    SUM(Vendas[Quantidade])
    )
)




- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- - - - - - -
Como as funções ALL e ALLSELECTED diferem no DAX?
R:ALL remove todos os filtros do contexto atual, Enquanto ALLSELECTED mantém os filtros aplicados fora da consulta.

*Para que servem as funções iteradoras, como SUMX, no DAX?
R: Executar cálculos linha a linha e depois agregar esses resultados.


*Para calcular o total acumulado de vendas no ano até a data atual, qual medida DAX é apropriada?
CALCULATE(SUM(Vendas[Valor]),DATESYTD(Calendario[Data]))


*O total acumulado de vendas até a data mais recente no contexto do visual
Total acumulado =
CALCULATE
    (SUM(Vendas[Valor]),
    FILTER(ALL(Calendario),
    Calendario[Data] <= MAX(Calendario[Data])
    )
)


*% A eficácia do investimento em termos de geração de lucro comparado ao custo
Medida DAX = DIVIDE(
    SUM(Vendas[Lucro]) - SUM(Despesas[Custo]), 
    SUM(Despesas[Custo]) 
)

*Para calcular o custo médio de aquisição de clientes (CAC) em um período, qual medida DAX é correta?
DIVIDE
    (SUM(Marketing[Custo Total]), 
    DISTINCTCOUNT(Clientes[ID Cliente])
)




